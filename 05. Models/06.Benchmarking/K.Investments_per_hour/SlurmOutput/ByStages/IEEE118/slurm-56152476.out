SLURM_JOB_ID: 56152476
SLURM_JOB_USER: vsc34888
SLURM_JOB_ACCOUNT: lp_elect_gen_modeling
SLURM_JOB_NAME: IEEE118_by_stages_loop_K_10-100
SLURM_CLUSTER_NAME: genius
SLURM_JOB_PARTITION: batch
SLURM_NNODES: 1
SLURM_NODELIST: r23i27n03
SLURM_JOB_CPUS_PER_NODE: 36
Date: Sun Apr 28 08:37:35 CEST 2024
Walltime: 03-00:00:00
========================================================================
Activation OK
Starting runs

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc10
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc10']
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  0 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  0 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 964.5911480797805
  Upper bound: 973.7313454946833
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10420
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 10375
  Number of nonzeros: 37515
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 360.4358379840851
  Error rc: 0
  Time: 361.3024456501007
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 973.7313454946897
  Upper bound: 973.7313454946897
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10375
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 10375
  Number of nonzeros: 35670
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.11121296882629395
  Error rc: 0
  Time: 0.5308988094329834
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  363 s
Objective function value                   973.73 Mâ‚¬
Objective function value                   973.7313454946897
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc20
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc20']
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  1 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1178.1244846927934
  Upper bound: 1189.705924301672
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20614
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 20569
  Number of nonzeros: 74733
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 785.4572420120239
  Error rc: 0
  Time: 786.173478603363
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1189.7059243017018
  Upper bound: 1189.7059243017018
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20569
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 20569
  Number of nonzeros: 71088
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.30589795112609863
  Error rc: 0
  Time: 0.8448336124420166
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  790 s
Objective function value                   1189.71 Mâ‚¬
Objective function value                   1189.7059243017018
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc30
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc30']
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  1 s
Generating network    constraints     ...  2 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1351.4301060252706
  Upper bound: 1365.0658975170454
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 30921
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 30876
  Number of nonzeros: 112177
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 12362.244510173798
  Error rc: 0
  Time: 12363.415197849274
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1365.0658975170466
  Upper bound: 1365.0658975170466
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 30876
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 30876
  Number of nonzeros: 106732
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.34634900093078613
  Error rc: 0
  Time: 0.9581358432769775
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  12369 s
Objective function value                   1365.07 Mâ‚¬
Objective function value                   1365.0658975170466
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc40
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc40']
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  4 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1242.541734115724
  Upper bound: 1254.7963052552348
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 41185
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 41140
  Number of nonzeros: 149535
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 21735.34595298767
  Error rc: 0
  Time: 21736.518582105637
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1254.7963052552093
  Upper bound: 1254.7963052552093
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 41140
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 41140
  Number of nonzeros: 142290
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.438892126083374
  Error rc: 0
  Time: 1.1992242336273193
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  21746 s
Objective function value                   1254.8 Mâ‚¬
Objective function value                   1254.7963052552093
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc50
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc50']
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  2 s
Generating generation capacity        ...  2 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  6 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1274.4288310505226
  Upper bound: 1287.194091308828
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51425
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 51380
  Number of nonzeros: 186845
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 13225.476677894592
  Error rc: 0
  Time: 13226.774460792542
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1287.194091308863
  Upper bound: 1287.194091308863
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51380
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 51380
  Number of nonzeros: 177800
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.546356201171875
  Error rc: 0
  Time: 1.4921786785125732
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  13240 s
Objective function value                   1287.19 Mâ‚¬
Objective function value                   1287.194091308863
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc60
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc60']
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  3 s
Generating generation capacity        ...  3 s
Generating network    capacity        ...  3 s
Generating network    constraints     ...  9 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1283.7868825388289
  Upper bound: 1296.5085272169028
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61524
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 61479
  Number of nonzeros: 223873
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 12253.041501998901
  Error rc: 0
  Time: 12254.775702476501
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1296.5085271922003
  Upper bound: 1296.5085271922003
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61479
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 61479
  Number of nonzeros: 213028
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.673907995223999
  Error rc: 0
  Time: 1.6012349128723145
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  12273 s
Objective function value                   1296.51 Mâ‚¬
Objective function value                   1296.5085271922003
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc70
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc70']
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  4 s
Generating generation capacity        ...  3 s
Generating network    capacity        ...  5 s
Generating network    constraints     ...  12 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1321.2969591703638
  Upper bound: 1333.3723797903622
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71583
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 71538
  Number of nonzeros: 260821
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 14194.076179981232
  Error rc: 0
  Time: 14195.667944431305
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1333.3723797656598
  Upper bound: 1333.3723797656598
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71538
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 71538
  Number of nonzeros: 248176
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.7867419719696045
  Error rc: 0
  Time: 1.8812041282653809
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  14219 s
Objective function value                   1333.37 Mâ‚¬
Objective function value                   1333.3723797656598
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc80
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc80']
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  5 s
Generating generation capacity        ...  4 s
Generating network    capacity        ...  6 s
Generating network    constraints     ...  16 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1334.8842817312093
  Upper bound: 1348.1241311097365
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 81958
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 81913
  Number of nonzeros: 298401
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 20518.126768112183
  Error rc: 0
  Time: 20520.10540151596
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1348.1241310850332
  Upper bound: 1348.1241310850332
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 81913
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 81913
  Number of nonzeros: 283956
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.8871607780456543
  Error rc: 0
  Time: 1.9812564849853516
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  20549 s
Objective function value                   1348.12 Mâ‚¬
Objective function value                   1348.1241310850332
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc90
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc90']
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  6 s
Generating generation capacity        ...  6 s
Generating network    capacity        ...  7 s
Generating network    constraints     ...  20 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1322.187541178644
  Upper bound: 1335.2060475794437
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 92341
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 92296
  Number of nonzeros: 335997
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 34948.188495874405
  Error rc: 0
  Time: 34950.228110075
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1335.206047579441
  Upper bound: 1335.206047579441
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 92296
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 92296
  Number of nonzeros: 319752
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.9841530323028564
  Error rc: 0
  Time: 2.7359073162078857
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  34987 s
Objective function value                   1335.21 Mâ‚¬
Objective function value                   1335.206047579441
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc100
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc100']
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  8 s
Generating generation capacity        ...  7 s
Generating network    capacity        ...  9 s
Generating network    constraints     ...  25 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1339.7239377250678
  Upper bound: 1352.8365518435974
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 102430
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 102385
  Number of nonzeros: 373005
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 45249.51908302307
  Error rc: 0
  Time: 45251.37697839737
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1352.83655183402
  Upper bound: 1352.83655183402
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 102385
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 102385
  Number of nonzeros: 354960
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 1.0901949405670166
  Error rc: 0
  Time: 2.380469799041748
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  45295 s
Objective function value                   1352.84 Mâ‚¬
Objective function value                   1352.83655183402
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/K.Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list
['IEEE118_ByStages_nc10', 'IEEE118_ByStages_nc20', 'IEEE118_ByStages_nc30', 'IEEE118_ByStages_nc40', 'IEEE118_ByStages_nc50', 'IEEE118_ByStages_nc60', 'IEEE118_ByStages_nc70', 'IEEE118_ByStages_nc80', 'IEEE118_ByStages_nc90', 'IEEE118_ByStages_nc100']
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc10
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc20
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc30
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc40
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc50
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc60
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc70
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc80
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc90
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc100
