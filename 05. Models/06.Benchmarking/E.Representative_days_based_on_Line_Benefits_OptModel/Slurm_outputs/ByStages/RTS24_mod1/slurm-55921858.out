SLURM_JOB_ID: 55921858
SLURM_JOB_USER: vsc34888
SLURM_JOB_ACCOUNT: lp_elect_gen_modeling
SLURM_JOB_NAME: RTS24_mod1_by_stages_loop_E_250-400
SLURM_CLUSTER_NAME: genius
SLURM_JOB_PARTITION: batch
SLURM_NNODES: 1
SLURM_NODELIST: r25i13n08
SLURM_JOB_CPUS_PER_NODE: 36
Date: Fri Mar 22 15:08:06 CET 2024
Walltime: 00-06:00:00
========================================================================
Activation OK
Starting runs

 #### Academic research license - for non-commercial use only #### 

RTS24_mod1_ByStages_nc250
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_mod1_ByStages_nc250']
Namespace(case='RTS24_mod1_ByStages_nc250', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_mod1_ByStages_nc250', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  10 s
Generating generation capacity        ...  9 s
Generating network    capacity        ...  14 s
Generating network    constraints     ...  36 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 60.534592311167636
  Upper bound: 60.534592311167636
  Number of objectives: 1
  Number of constraints: 88753
  Number of variables: 59814
  Number of binary variables: 21
  Number of integer variables: 21
  Number of continuous variables: 59793
  Number of nonzeros: 241663
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 315.4410300254822
  Error rc: 0
  Time: 316.4619414806366
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
Number of fixed variables:  21
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 60.53459231116783
  Upper bound: 60.53459231116783
  Number of objectives: 1
  Number of constraints: 88753
  Number of variables: 59793
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 59793
  Number of nonzeros: 220642
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.450268030166626
  Error rc: 0
  Time: 1.172013282775879
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  371 s
Objective function value                   60.53 Mâ‚¬
Objective function value                   60.53459231116783
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

RTS24_mod1_ByStages_nc300
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_mod1_ByStages_nc300']
Namespace(case='RTS24_mod1_ByStages_nc300', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_mod1_ByStages_nc300', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  14 s
Generating generation capacity        ...  12 s
Generating network    capacity        ...  20 s
Generating network    constraints     ...  51 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 58.014480358751484
  Upper bound: 58.014480358751484
  Number of objectives: 1
  Number of constraints: 106503
  Number of variables: 71758
  Number of binary variables: 21
  Number of integer variables: 21
  Number of continuous variables: 71737
  Number of nonzeros: 289955
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 210.725604057312
  Error rc: 0
  Time: 211.61044239997864
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
Number of fixed variables:  21
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 58.014480358751634
  Upper bound: 58.014480358751634
  Number of objectives: 1
  Number of constraints: 106503
  Number of variables: 71737
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 71737
  Number of nonzeros: 264734
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.5745189189910889
  Error rc: 0
  Time: 1.4365293979644775
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  289 s
Objective function value                   58.01 Mâ‚¬
Objective function value                   58.014480358751634
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

RTS24_mod1_ByStages_nc350
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_mod1_ByStages_nc350']
Namespace(case='RTS24_mod1_ByStages_nc350', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_mod1_ByStages_nc350', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  19 s
Generating generation capacity        ...  17 s
Generating network    capacity        ...  27 s
Generating network    constraints     ...  69 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 63.44413531067545
  Upper bound: 63.444135310675456
  Number of objectives: 1
  Number of constraints: 124253
  Number of variables: 83729
  Number of binary variables: 21
  Number of integer variables: 21
  Number of continuous variables: 83708
  Number of nonzeros: 338329
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 272.6813859939575
  Error rc: 0
  Time: 273.72661113739014
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
Number of fixed variables:  21
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 63.44413531067557
  Upper bound: 63.44413531067557
  Number of objectives: 1
  Number of constraints: 124253
  Number of variables: 83708
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 83708
  Number of nonzeros: 308908
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.656994104385376
  Error rc: 0
  Time: 1.6418254375457764
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  378 s
Objective function value                   63.44 Mâ‚¬
Objective function value                   63.44413531067557
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

RTS24_mod1_ByStages_nc400
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_mod1_ByStages_nc400']
Namespace(case='RTS24_mod1_ByStages_nc400', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_mod1_ByStages_nc400', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  6 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  24 s
Generating generation capacity        ...  22 s
Generating network    capacity        ...  35 s
Generating network    constraints     ...  91 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 63.22663638921175
  Upper bound: 63.22663638921175
  Number of objectives: 1
  Number of constraints: 142003
  Number of variables: 95724
  Number of binary variables: 21
  Number of integer variables: 21
  Number of continuous variables: 95703
  Number of nonzeros: 386780
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 570.0308830738068
  Error rc: 0
  Time: 571.3457186222076
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
Number of fixed variables:  21
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 63.22663638921181
  Upper bound: 63.22663638921181
  Number of objectives: 1
  Number of constraints: 142003
  Number of variables: 95703
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 95703
  Number of nonzeros: 353159
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.7489299774169922
  Error rc: 0
  Time: 1.9190332889556885
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  706 s
Objective function value                   63.23 Mâ‚¬
Objective function value                   63.22663638921181
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list
['RTS24_mod1_ByStages_nc250', 'RTS24_mod1_ByStages_nc300', 'RTS24_mod1_ByStages_nc350', 'RTS24_mod1_ByStages_nc400']
python oSN_Main_DCOPF.py --case RTS24_mod1_ByStages_nc250
python oSN_Main_DCOPF.py --case RTS24_mod1_ByStages_nc300
python oSN_Main_DCOPF.py --case RTS24_mod1_ByStages_nc350
python oSN_Main_DCOPF.py --case RTS24_mod1_ByStages_nc400
