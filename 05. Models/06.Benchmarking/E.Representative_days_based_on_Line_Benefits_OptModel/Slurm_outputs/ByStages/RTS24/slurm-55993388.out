SLURM_JOB_ID: 55993388
SLURM_JOB_USER: vsc34888
SLURM_JOB_ACCOUNT: lp_elect_gen_modeling
SLURM_JOB_NAME: RTS24_by_stages_loop_E_300-400
SLURM_CLUSTER_NAME: genius
SLURM_JOB_PARTITION: batch
SLURM_NNODES: 1
SLURM_NODELIST: r27i27n15
SLURM_JOB_CPUS_PER_NODE: 36
Date: Wed Apr 10 22:00:32 CEST 2024
Walltime: 00-12:00:00
========================================================================
Activation OK
Starting runs

 #### Academic research license - for non-commercial use only #### 

RTS24_ByStages_nc300
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_ByStages_nc300']
Namespace(case='RTS24_ByStages_nc300', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_ByStages_nc300', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  14 s
Generating generation capacity        ...  13 s
Generating network    capacity        ...  23 s
Generating network    constraints     ...  59 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 221.81157868942208
  Upper bound: 223.64732856172498
  Number of objectives: 1
  Number of constraints: 116703
  Number of variables: 70552
  Number of binary variables: 30
  Number of integer variables: 30
  Number of continuous variables: 70522
  Number of nonzeros: 313865
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 4372.133698940277
  Error rc: 0
  Time: 4373.3006155490875
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_113,N_123,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_107,N_108,cac2]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_117,N_122,cac2]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_107,N_108,cac1]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_117,N_122,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_113,N_123,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_107,N_108,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_117,N_122,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_113,N_123,cac2]
Number of fixed variables:  30
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 223.6473285617251
  Upper bound: 223.6473285617251
  Number of objectives: 1
  Number of constraints: 116703
  Number of variables: 70522
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 70522
  Number of nonzeros: 277835
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.5910091400146484
  Error rc: 0
  Time: 1.4696927070617676
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  4459 s
Objective function value                   223.65 Mâ‚¬
Objective function value                   223.6473285617251
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

RTS24_ByStages_nc350
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_ByStages_nc350']
Namespace(case='RTS24_ByStages_nc350', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_ByStages_nc350', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  19 s
Generating generation capacity        ...  17 s
Generating network    capacity        ...  31 s
Generating network    constraints     ...  81 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 226.87718073973124
  Upper bound: 228.6538898601442
  Number of objectives: 1
  Number of constraints: 136153
  Number of variables: 82235
  Number of binary variables: 30
  Number of integer variables: 30
  Number of continuous variables: 82205
  Number of nonzeros: 365964
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 3724.4244911670685
  Error rc: 0
  Time: 3725.738704919815
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_107,N_108,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_107,N_108,cac3]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_107,N_108,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_117,N_122,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_117,N_122,cac3]
fixing: vNetworkInvest[2030,N_117,N_122,cac1]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_113,N_123,cac2]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_113,N_123,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_113,N_123,cac1]
Number of fixed variables:  30
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 228.65388986014446
  Upper bound: 228.65388986014446
  Number of objectives: 1
  Number of constraints: 136153
  Number of variables: 82205
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 82205
  Number of nonzeros: 323934
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.643247127532959
  Error rc: 0
  Time: 2.1255290508270264
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  3842 s
Objective function value                   228.65 Mâ‚¬
Objective function value                   228.65388986014446
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

RTS24_ByStages_nc400
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel
gurobi
['oSN_Main_DCOPF.py', '--case', 'RTS24_ByStages_nc400']
Namespace(case='RTS24_ByStages_nc400', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Namespace(case='RTS24_ByStages_nc400', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel', solver='gurobi')
Reading    input data                 ...  0 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  7 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  24 s
Generating generation capacity        ...  22 s
Generating network    capacity        ...  41 s
Generating network    constraints     ...  105 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 222.93549319350058
  Upper bound: 224.7462859810526
  Number of objectives: 1
  Number of constraints: 155603
  Number of variables: 94129
  Number of binary variables: 30
  Number of integer variables: 30
  Number of continuous variables: 94099
  Number of nonzeros: 418696
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 8184.640950918198
  Error rc: 0
  Time: 8185.88592505455
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,N_117,N_122,cac3]
fixing: vNetworkInvest[2030,N_115,N_116,cac1]
fixing: vNetworkInvest[2030,N_118,N_121,cac1]
fixing: vNetworkInvest[2030,N_117,N_118,cac1]
fixing: vNetworkInvest[2030,N_107,N_108,cac2]
fixing: vNetworkInvest[2030,N_113,N_123,cac2]
fixing: vNetworkInvest[2030,N_109,N_111,cac1]
fixing: vNetworkInvest[2030,N_115,N_116,cac2]
fixing: vNetworkInvest[2030,N_107,N_108,cac3]
fixing: vNetworkInvest[2030,N_113,N_123,cac3]
fixing: vNetworkInvest[2030,N_118,N_121,cac2]
fixing: vNetworkInvest[2030,N_117,N_118,cac2]
fixing: vNetworkInvest[2030,N_115,N_116,cac3]
fixing: vNetworkInvest[2030,N_117,N_118,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac1]
fixing: vNetworkInvest[2030,N_109,N_111,cac2]
fixing: vNetworkInvest[2030,N_118,N_121,cac3]
fixing: vNetworkInvest[2030,N_109,N_111,cac3]
fixing: vNetworkInvest[2030,N_116,N_117,cac2]
fixing: vNetworkInvest[2030,N_116,N_117,cac3]
fixing: vNetworkInvest[2030,N_103,N_124,cac1]
fixing: vNetworkInvest[2030,N_106,N_108,cac1]
fixing: vNetworkInvest[2030,N_113,N_123,cac1]
fixing: vNetworkInvest[2030,N_117,N_122,cac1]
fixing: vNetworkInvest[2030,N_103,N_124,cac2]
fixing: vNetworkInvest[2030,N_106,N_108,cac2]
fixing: vNetworkInvest[2030,N_103,N_124,cac3]
fixing: vNetworkInvest[2030,N_106,N_108,cac3]
fixing: vNetworkInvest[2030,N_107,N_108,cac1]
fixing: vNetworkInvest[2030,N_117,N_122,cac2]
Number of fixed variables:  30
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 224.74628602101356
  Upper bound: 224.74628602101356
  Number of objectives: 1
  Number of constraints: 155603
  Number of variables: 94099
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 94099
  Number of nonzeros: 370666
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.8025360107421875
  Error rc: 0
  Time: 1.9529352188110352
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  8336 s
Objective function value                   224.75 Mâ‚¬
Objective function value                   224.74628602101356
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/E.Representative_days_based_on_Line_Benefits_OptModel/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list
['RTS24_ByStages_nc300', 'RTS24_ByStages_nc350', 'RTS24_ByStages_nc400']
python oSN_Main_DCOPF.py --case RTS24_ByStages_nc300
python oSN_Main_DCOPF.py --case RTS24_ByStages_nc350
python oSN_Main_DCOPF.py --case RTS24_ByStages_nc400
