SLURM_JOB_ID: 55630386
SLURM_JOB_USER: vsc34888
SLURM_JOB_ACCOUNT: lp_elect_gen_modeling
SLURM_JOB_NAME: 118_by_stages_loop_L_10-100
SLURM_CLUSTER_NAME: genius
SLURM_JOB_PARTITION: batch
SLURM_NNODES: 1
SLURM_NODELIST: r26i13n18
SLURM_JOB_CPUS_PER_NODE: 36
Date: Tue Jan 30 17:05:44 CET 2024
Walltime: 03-00:00:00
========================================================================
Activation OK
Starting runs

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc10
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc10']
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  0 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  0 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 764.8872685150461
  Upper bound: 771.0303892568852
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10467
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 10422
  Number of nonzeros: 37609
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 588.2684781551361
  Error rc: 0
  Time: 589.0661551952362
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 771.0303892568884
  Upper bound: 771.0303892568884
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10422
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 10422
  Number of nonzeros: 35764
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.1071779727935791
  Error rc: 0
  Time: 0.3314695358276367
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  590 s
Objective function value                   771.03 Mâ‚¬
Objective function value                   771.0303892568884
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc20
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc20']
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  1 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1170.9701493377238
  Upper bound: 1182.2531889372635
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20699
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 20654
  Number of nonzeros: 74903
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 2508.9860310554504
  Error rc: 0
  Time: 2509.9358365535736
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1182.2563504030322
  Upper bound: 1182.2563504030322
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20654
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 20654
  Number of nonzeros: 71258
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.20911002159118652
  Error rc: 0
  Time: 0.5357732772827148
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  2513 s
Objective function value                   1182.26 Mâ‚¬
Objective function value                   1182.2563504030322
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc30
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc30']
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  1 s
Generating network    constraints     ...  2 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1179.9743983460323
  Upper bound: 1190.9530590182815
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 31020
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 30975
  Number of nonzeros: 112375
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 4085.0695588588715
  Error rc: 0
  Time: 4085.9833426475525
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1190.9530590182821
  Upper bound: 1190.9530590182821
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 30975
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 30975
  Number of nonzeros: 106930
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.3113059997558594
  Error rc: 0
  Time: 0.745551586151123
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  4091 s
Objective function value                   1190.95 Mâ‚¬
Objective function value                   1190.9530590182821
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc40
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc40']
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  4 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1191.7062260969997
  Upper bound: 1203.5719325234631
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 41339
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 41294
  Number of nonzeros: 149843
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 8029.971307992935
  Error rc: 0
  Time: 8030.9864020347595
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1203.5719325234609
  Upper bound: 1203.5719325234609
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 41294
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 41294
  Number of nonzeros: 142598
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.38103795051574707
  Error rc: 0
  Time: 0.9129760265350342
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  8040 s
Objective function value                   1203.57 Mâ‚¬
Objective function value                   1203.5719325234609
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc50
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc50']
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  2 s
Generating generation capacity        ...  2 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  6 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1218.50424724723
  Upper bound: 1230.3872022867358
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51613
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 51568
  Number of nonzeros: 187221
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 10639.551682949066
  Error rc: 0
  Time: 10640.760162830353
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1230.3872022867342
  Upper bound: 1230.3872022867342
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51568
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 51568
  Number of nonzeros: 178176
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.4732229709625244
  Error rc: 0
  Time: 1.1095187664031982
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  10653 s
Objective function value                   1230.39 Mâ‚¬
Objective function value                   1230.3872022867342
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc60
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc60']
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  3 s
Generating generation capacity        ...  2 s
Generating network    capacity        ...  3 s
Generating network    constraints     ...  9 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1251.923273723973
  Upper bound: 1264.1038742985045
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61798
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 61753
  Number of nonzeros: 224421
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 11410.519717931747
  Error rc: 0
  Time: 11411.975501298904
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1264.1038742985013
  Upper bound: 1264.1038742985013
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61753
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 61753
  Number of nonzeros: 213576
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.5493390560150146
  Error rc: 0
  Time: 1.3023607730865479
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  11429 s
Objective function value                   1264.1 Mâ‚¬
Objective function value                   1264.1038742985013
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc70
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc70']
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  4 s
Generating generation capacity        ...  3 s
Generating network    capacity        ...  4 s
Generating network    constraints     ...  12 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1264.2090692433826
  Upper bound: 1276.6082461167719
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71998
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 71953
  Number of nonzeros: 261651
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 15156.59610080719
  Error rc: 0
  Time: 15158.104938268661
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1276.6082461167648
  Upper bound: 1276.6082461167648
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71953
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 71953
  Number of nonzeros: 249006
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.669842004776001
  Error rc: 0
  Time: 1.5386507511138916
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  15180 s
Objective function value                   1276.61 Mâ‚¬
Objective function value                   1276.6082461167648
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc80
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc80']
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  5 s
Generating generation capacity        ...  4 s
Generating network    capacity        ...  6 s
Generating network    constraints     ...  15 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1272.3798236526661
  Upper bound: 1285.0713643500849
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 82462
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 82417
  Number of nonzeros: 299409
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 19812.741074085236
  Error rc: 0
  Time: 19814.29981994629
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1285.0713643500824
  Upper bound: 1285.0713643500824
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 82417
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 82417
  Number of nonzeros: 284964
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.7508599758148193
  Error rc: 0
  Time: 1.7339513301849365
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  19842 s
Objective function value                   1285.07 Mâ‚¬
Objective function value                   1285.0713643500824
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc90
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc90']
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  6 s
Generating generation capacity        ...  5 s
Generating network    capacity        ...  7 s
Generating network    constraints     ...  19 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1280.184656489121
  Upper bound: 1292.8570668412
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 92976
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 92931
  Number of nonzeros: 337267
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 28752.187337875366
  Error rc: 0
  Time: 28754.09164404869
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1292.8570668412024
  Upper bound: 1292.8570668412024
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 92931
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 92931
  Number of nonzeros: 321022
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.8033640384674072
  Error rc: 0
  Time: 1.8690094947814941
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  28788 s
Objective function value                   1292.86 Mâ‚¬
Objective function value                   1292.8570668412024
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc100
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc100']
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  7 s
Generating generation capacity        ...  7 s
Generating network    capacity        ...  9 s
Generating network    constraints     ...  23 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1299.8426461063516
  Upper bound: 1312.6884915406658
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 103087
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 103042
  Number of nonzeros: 374319
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 42596.47293806076
  Error rc: 0
  Time: 42598.59973216057
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1312.6884915406656
  Upper bound: 1312.6884915406656
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 103042
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 103042
  Number of nonzeros: 356274
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.9435999393463135
  Error rc: 0
  Time: 2.140528917312622
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  42640 s
Objective function value                   1312.69 Mâ‚¬
Objective function value                   1312.6884915406656
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/L.Cont_Investments_per_hour/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list
['IEEE118_ByStages_nc10', 'IEEE118_ByStages_nc20', 'IEEE118_ByStages_nc30', 'IEEE118_ByStages_nc40', 'IEEE118_ByStages_nc50', 'IEEE118_ByStages_nc60', 'IEEE118_ByStages_nc70', 'IEEE118_ByStages_nc80', 'IEEE118_ByStages_nc90', 'IEEE118_ByStages_nc100']
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc10
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc20
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc30
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc40
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc50
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc60
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc70
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc80
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc90
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc100
