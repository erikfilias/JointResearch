SLURM_JOB_ID: 55457161
SLURM_JOB_USER: vsc34888
SLURM_JOB_ACCOUNT: lp_elect_gen_modeling
SLURM_JOB_NAME: IEEE118_by_stages_loop_B_10-100
SLURM_CLUSTER_NAME: genius
SLURM_JOB_PARTITION: batch
SLURM_NNODES: 1
SLURM_NODELIST: r22i13n15
SLURM_JOB_CPUS_PER_NODE: 36
Date: Fri Dec 22 17:16:20 CET 2023
Walltime: 03-00:00:00
========================================================================
Activation OK
Starting runs

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc10
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc10']
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc10', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  0 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  0 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1521.3042927904462
  Upper bound: 1535.2767192596723
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10163
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 10118
  Number of nonzeros: 37001
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 857.1528630256653
  Error rc: 0
  Time: 857.766802072525
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1535.276719259672
  Upper bound: 1535.276719259672
  Number of objectives: 1
  Number of constraints: 14513
  Number of variables: 10118
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 10118
  Number of nonzeros: 35156
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.11584305763244629
  Error rc: 0
  Time: 0.3666508197784424
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  859 s
Objective function value                   1535.28 Mâ‚¬
Objective function value                   1535.276719259672
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc20
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc20']
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc20', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  0 s
Generating generation capacity        ...  0 s
Generating network    capacity        ...  0 s
Generating network    constraints     ...  1 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1557.5240484634066
  Upper bound: 1573.0404302208744
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20286
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 20241
  Number of nonzeros: 74077
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 9259.886829137802
  Error rc: 0
  Time: 9260.614893198013
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1573.0513527942728
  Upper bound: 1573.0513527942728
  Number of objectives: 1
  Number of constraints: 29023
  Number of variables: 20241
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 20241
  Number of nonzeros: 70432
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.24496793746948242
  Error rc: 0
  Time: 0.8326623439788818
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  9264 s
Objective function value                   1573.05 Mâ‚¬
Objective function value                   1573.0513527942728
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc30
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc30']
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc30', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  1 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  1 s
Generating network    constraints     ...  3 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1214.9869541196056
  Upper bound: 1227.0460407594478
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 30509
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 30464
  Number of nonzeros: 111353
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 8741.169687986374
  Error rc: 0
  Time: 8742.283380508423
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1227.0460407594476
  Upper bound: 1227.0460407594476
  Number of objectives: 1
  Number of constraints: 43533
  Number of variables: 30464
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 30464
  Number of nonzeros: 105908
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.3352169990539551
  Error rc: 0
  Time: 0.7958576679229736
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  8748 s
Objective function value                   1227.05 Mâ‚¬
Objective function value                   1227.0460407594476
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc40
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc40']
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc40', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  1 s
Generating generation capacity        ...  1 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  4 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1220.1295456678183
  Upper bound: 1232.0542705511339
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 40746
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 40701
  Number of nonzeros: 148657
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 9227.242944955826
  Error rc: 0
  Time: 9228.229724884033
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1232.0542705511382
  Upper bound: 1232.0542705511382
  Number of objectives: 1
  Number of constraints: 58043
  Number of variables: 40701
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 40701
  Number of nonzeros: 141412
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.42704200744628906
  Error rc: 0
  Time: 1.0085980892181396
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  9237 s
Objective function value                   1232.05 Mâ‚¬
Objective function value                   1232.0542705511382
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc50
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc50']
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc50', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  2 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  2 s
Generating generation capacity        ...  2 s
Generating network    capacity        ...  2 s
Generating network    constraints     ...  6 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1402.073948837115
  Upper bound: 1416.0671247696328
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51187
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 51142
  Number of nonzeros: 186369
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 12607.676164865494
  Error rc: 0
  Time: 12608.696249246597
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1416.0671247696318
  Upper bound: 1416.0671247696318
  Number of objectives: 1
  Number of constraints: 72553
  Number of variables: 51142
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 51142
  Number of nonzeros: 177324
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.5528669357299805
  Error rc: 0
  Time: 1.2311804294586182
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  12622 s
Objective function value                   1416.07 Mâ‚¬
Objective function value                   1416.0671247696318
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc60
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc60']
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc60', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  3 s
Generating generation capacity        ...  3 s
Generating network    capacity        ...  3 s
Generating network    constraints     ...  9 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1396.5822217530788
  Upper bound: 1410.6798114615174
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61061
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 61016
  Number of nonzeros: 222947
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 23211.890939950943
  Error rc: 0
  Time: 23213.35183620453
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1410.6798114615121
  Upper bound: 1410.6798114615121
  Number of objectives: 1
  Number of constraints: 87063
  Number of variables: 61016
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 61016
  Number of nonzeros: 212102
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.6489899158477783
  Error rc: 0
  Time: 1.4390332698822021
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  23231 s
Objective function value                   1410.68 Mâ‚¬
Objective function value                   1410.6798114615121
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc70
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc70']
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc70', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  0 s
Generating operation & investment     ...  0 s
Generating balance                    ...  3 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  4 s
Generating generation capacity        ...  3 s
Generating network    capacity        ...  5 s
Generating network    constraints     ...  12 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1259.2851227365977
  Upper bound: 1271.5115994152127
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71197
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 71152
  Number of nonzeros: 260049
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 16390.750070095062
  Error rc: 0
  Time: 16392.16123843193
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1271.5115994152145
  Upper bound: 1271.5115994152145
  Number of objectives: 1
  Number of constraints: 101573
  Number of variables: 71152
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 71152
  Number of nonzeros: 247404
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.7781970500946045
  Error rc: 0
  Time: 1.6790766716003418
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  16415 s
Objective function value                   1271.51 Mâ‚¬
Objective function value                   1271.5115994152145
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  0 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc80
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc80']
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc80', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  0 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  5 s
Generating generation capacity        ...  4 s
Generating network    capacity        ...  6 s
Generating network    constraints     ...  16 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1218.8590975251707
  Upper bound: 1230.4682467396387
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 81485
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 81440
  Number of nonzeros: 297455
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 23809.7158639431
  Error rc: 0
  Time: 23811.312688589096
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1230.4682467396349
  Upper bound: 1230.4682467396349
  Number of objectives: 1
  Number of constraints: 116083
  Number of variables: 81440
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 81440
  Number of nonzeros: 283010
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.9108500480651855
  Error rc: 0
  Time: 1.922276258468628
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  23840 s
Objective function value                   1230.47 Mâ‚¬
Objective function value                   1230.4682467396349
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc90
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc90']
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc90', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  4 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  6 s
Generating generation capacity        ...  6 s
Generating network    capacity        ...  7 s
Generating network    constraints     ...  20 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1281.3445811809654
  Upper bound: 1294.198934796957
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 91564
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 91519
  Number of nonzeros: 334443
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 36704.230988025665
  Error rc: 0
  Time: 36706.45274877548
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1294.198934796957
  Upper bound: 1294.198934796957
  Number of objectives: 1
  Number of constraints: 130593
  Number of variables: 91519
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 91519
  Number of nonzeros: 318198
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 0.9818449020385742
  Error rc: 0
  Time: 2.108607769012451
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  36742 s
Objective function value                   1294.2 Mâ‚¬
Objective function value                   1294.198934796957
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list

 #### Academic research license - for non-commercial use only #### 

IEEE118_ByStages_nc100
/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost
gurobi
['oSN_Main_DCOPF.py', '--case', 'IEEE118_ByStages_nc100']
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Namespace(case='IEEE118_ByStages_nc100', dir='/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost', solver='gurobi')
Reading    input data                 ...  1 s
Setting up input data                 ...  1 s
Generating objective function         ...  1 s
Generating operation & investment     ...  0 s
Generating balance                    ...  5 s
Generating storage operation          ...  0 s
Generating generation commitment      ...  8 s
Generating generation capacity        ...  7 s
Generating network    capacity        ...  9 s
Generating network    constraints     ...  24 s
Econometric analysis  constraints     ...  0 s
Termination condition:  optimal
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1264.5568966329768
  Upper bound: 1276.9228890331258
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 101784
  Number of binary variables: 45
  Number of integer variables: 45
  Number of continuous variables: 101739
  Number of nonzeros: 371713
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 46579.56063294411
  Error rc: 0
  Time: 46581.31760454178
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
# ============================================================================= #
# ============================================================================= #
fixing: vNetworkInvest[2030,bus080,bus099,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac2]
fixing: vNetworkInvest[2030,bus077,bus082,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac1]
fixing: vNetworkInvest[2030,bus099,bus100,cac2]
fixing: vNetworkInvest[2030,bus015,bus017,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac2]
fixing: vNetworkInvest[2030,bus093,bus094,cac2]
fixing: vNetworkInvest[2030,bus001,bus003,cac1]
fixing: vNetworkInvest[2030,bus008,bus030,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac2]
fixing: vNetworkInvest[2030,bus069,bus077,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac1]
fixing: vNetworkInvest[2030,bus094,bus100,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac2]
fixing: vNetworkInvest[2030,bus074,bus075,cac1]
fixing: vNetworkInvest[2030,bus033,bus037,cac1]
fixing: vNetworkInvest[2030,bus080,bus099,cac2]
fixing: vNetworkInvest[2030,bus030,bus038,cac1]
fixing: vNetworkInvest[2030,bus038,bus037,cac1]
fixing: vNetworkInvest[2030,bus082,bus083,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac1]
fixing: vNetworkInvest[2030,bus026,bus030,cac2]
fixing: vNetworkInvest[2030,bus005,bus006,cac1]
fixing: vNetworkInvest[2030,bus025,bus027,cac2]
fixing: vNetworkInvest[2030,bus068,bus069,cac1]
fixing: vNetworkInvest[2030,bus015,bus033,cac1]
fixing: vNetworkInvest[2030,bus017,bus113,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac1]
fixing: vNetworkInvest[2030,bus012,bus117,cac1]
fixing: vNetworkInvest[2030,bus069,bus077,cac2]
fixing: vNetworkInvest[2030,bus038,bus037,cac2]
fixing: vNetworkInvest[2030,bus023,bus032,cac2]
fixing: vNetworkInvest[2030,bus099,bus100,cac1]
fixing: vNetworkInvest[2030,bus093,bus094,cac1]
fixing: vNetworkInvest[2030,bus065,bus068,cac1]
fixing: vNetworkInvest[2030,bus003,bus005,cac1]
fixing: vNetworkInvest[2030,bus005,bus006,cac2]
fixing: vNetworkInvest[2030,bus015,bus033,cac2]
fixing: vNetworkInvest[2030,bus008,bus005,cac1]
fixing: vNetworkInvest[2030,bus068,bus069,cac2]
fixing: vNetworkInvest[2030,bus023,bus024,cac1]
fixing: vNetworkInvest[2030,bus038,bus065,cac2]
Number of fixed variables:  45
# ============================================================================= #
# ============================================================================= #
WARNING: Implicitly replacing the Component attribute dual (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
WARNING: Implicitly replacing the Component attribute rc (type=<class
'pyomo.core.base.suffix.Suffix'>) on block 'openStarNet - Open Version of the
StartNetLite Model (Long Term Transmission Expansion Planning) - Version 1.0.0
- January 16, 2023' with a new Component (type=<class
'pyomo.core.base.suffix.Suffix'>). This is usually indicative of a modelling
error. To avoid this warning, use block.del_component() and
block.add_component().
# ==========================================================
# = Solver Results                                         =
# ==========================================================
# ----------------------------------------------------------
#   Problem Information
# ----------------------------------------------------------
Problem: 
- Name: x1
  Lower bound: 1276.9228890331276
  Upper bound: 1276.9228890331276
  Number of objectives: 1
  Number of constraints: 145103
  Number of variables: 101739
  Number of binary variables: 0
  Number of integer variables: 0
  Number of continuous variables: 101739
  Number of nonzeros: 353668
  Sense: minimize
# ----------------------------------------------------------
#   Solver Information
# ----------------------------------------------------------
Solver: 
- Status: ok
  Return code: 0
  Message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Termination condition: optimal
  Termination message: Model was solved to optimality (subject to tolerances), and an optimal solution is available.
  Wall time: 1.0850369930267334
  Error rc: 0
  Time: 2.3275859355926514
# ----------------------------------------------------------
#   Solution Information
# ----------------------------------------------------------
Solution: 
- number of solutions: 0
  number of solutions displayed: 0
Solving                               ...  46624 s
Objective function value                   1276.92 Mâ‚¬
Objective function value                   1276.9228890331276
Writing         cost summary results  ...  0 s
Writing           investment results  ...  0 s
Writing    network operation results  ...  0 s
Writing generation operation results  ...  1 s
Writing        ESS operation results  ...  0 s
Traceback (most recent call last):
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1695, in <module>
    main(openStarNet)
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 137, in main
    model = saving_results(args.dir, args.case, args.solver, model, model)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustre1/scratch/348/vsc34888/JointResearch/05.Models/06.Benchmarking/B.Operation_cost/oSN_Main_DCOPF.py", line 1667, in saving_results
    OutputResults = pd.Series(data=[optmodel.dual[optmodel.eBalanceP[p,sc,st,n,nd]]*1e3/model.pScenProb[p,sc]()/model.pLoadLevelDuration[n]() for p,sc,n,nd,st in dual_eBalance_list], index=pd.MultiIndex.from_tuples(dual_eBalance_list))
                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 205, in new_meth
    return meth(self_or_cls, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/leuven/348/vsc34888/miniconda3/envs/Jr23/lib/python3.11/site-packages/pandas/core/indexes/multi.py", line 565, in from_tuples
    raise TypeError("Cannot infer number of levels from empty list")
TypeError: Cannot infer number of levels from empty list
['IEEE118_ByStages_nc10', 'IEEE118_ByStages_nc20', 'IEEE118_ByStages_nc30', 'IEEE118_ByStages_nc40', 'IEEE118_ByStages_nc50', 'IEEE118_ByStages_nc60', 'IEEE118_ByStages_nc70', 'IEEE118_ByStages_nc80', 'IEEE118_ByStages_nc90', 'IEEE118_ByStages_nc100']
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc10
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc20
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc30
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc40
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc50
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc60
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc70
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc80
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc90
python oSN_Main_DCOPF.py --case IEEE118_ByStages_nc100
